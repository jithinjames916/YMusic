// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: file('config.gradle')

//
buildscript {
    ScriptHandler scriptHandler ->
        ext.kotlin_version = '1.3.21'
        //配置工程仓库地址
        repositories {
            RepositoryHandler repositoryHandler ->
                google()
                jcenter()
                mavenCentral()
                maven {
                    url 'http://localhost:8081/repository/yds_release/'
                    credentials {
                        username 'admin'
                        password 'admin123'
                    }
                }
                maven {
                    url 'http://localhost:8081/repository/yds_snapshots/'
                    credentials {
                        username 'admin'
                        password 'admin123'
                    }
                }
        }
        //配置插件依赖地址
        dependencies {
            classpath 'com.android.tools.build:gradle:3.3.2'
            //greendao插件依赖
            classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2'
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

            // NOTE: Do not place your application dependencies here; they belong
            // in the individual module build.gradle files
        }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//配置阶段开始之前
this.beforeEvaluate {
//    println '配置阶段前执行完毕'
}

//配置阶段之后
this.afterEvaluate {
//    println '配置阶段执行完毕'
}

//声明周期执行完之后
this.gradle.buildFinished {
//    println '执行阶段执行完毕'
}

this.gradle.beforeProject {

}


this.gradle.afterProject {

}

//执行在配置阶段
//this.getProjects()
def getProjects() {
    println '--------------'
    println 'root project'
    println '---------------'
    this.getAllprojects().eachWithIndex {
        Project project, int index ->
            if (index == 0) {
                println "Root project :${project.name}"
            } else {
                println "+---project :${project.name}"
            }
    }
}

//this.getSubProjects()
def getSubProjects() {
    println '--------------'
    println 'sub project'
    println '---------------'
    this.getSubprojects().eachWithIndex {
        Project project, int index ->
            println "+---project :${project.name}"
    }
}

//获取父project
//this.getParentProject()
def getParentProject() {
    println '--------------'
    println 'parent project'
    println '---------------'
    def name = this.getParent().name
    println "the parent project is ${name}"
}

//this.getRootPro()
def getRootPro() {
    println '--------------'
    println 'root project'
    println '---------------'
    def name = this.getRootProject().name
    println "the root project is ${name}"
}

//操作子组件
project('app') {
        //app project
    Project project ->
        apply plugin: 'com.android.application'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'kotlin-android'

        dependencies {

        }

        android {

        }

}
//
//project("lib_webview"){
//    Project project ->
//}

//配置当前project和他的子project
allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url 'http://localhost:8081/repository/yds_release/'
            credentials {
                username 'admin'
                password 'admin123'
            }
        }
        maven {
            url 'http://localhost:8081/repository/yds_snapshots/'
            credentials {
                username 'admin'
                password 'admin123'
            }
        }
    }
}

//子工程配置
subprojects {
    Project project ->
//        apply from:'../config.gradle'
        if (project.plugins.hasPlugin('com.android.library')) {

        }
}

//
//println getRootDir().absolutePath
//println getBuildDir().absolutePath
//println getProjectDir().absolutePath

//println getContent('config.gradle')
def getContent(String path) {
    try {
        def file = file(path)
        return file.text
    } catch (GradleException e) {
        println 'file not found'
    }
    return null
}

//copy{
//    from file('README.md')
//    into getRootProject().getBuildDir()
//
//}

//对文件树进行遍历
fileTree('gradle/wrapper') {
    FileTree filetree ->
        filetree.visit {
            FileTreeElement element -> println element.name
//                copy{
//                    from element.file
//                    into getRootProject().getBuildDir().path+'/copy'
//                }
        }
}












